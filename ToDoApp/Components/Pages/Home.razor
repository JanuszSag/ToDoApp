@page "/"
@using ToDoApp.Components.Services
@using ToDoApp.DTO
@using ToDoApp.Models
@using ToDoApp.Services
@inject ToDoContext Context
@inject IDialogService DialogService
@inject IToDoService ToDoService

<MudThemeProvider />
<MudPopoverProvider />

<MudDialogProvider />

<MudTable Items="@ToDoItems" Hover="true">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>State</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="isCompleted">@context.IsCompleted</MudTd>
        <MudTd DataLabel="Remove"><MudButton Variant="Variant.Filled" Color="Color.Secondary">Remove</MudButton></MudTd>
    </RowTemplate>
</MudTable>

<MudButton OnClick="@(() => OpenDialogAsync())" Variant="Variant.Filled" Color="Color.Primary">Add new item</MudButton>

@code
{
    public List<ToDoTask> ToDoItems;
    
    protected override Task OnInitializedAsync()
    {
        ToDoItems = Context.ToDoTask.ToList();
        return base.OnInitializedAsync();
    }
    
    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<AddToDoDialog>("Simple Dialog", new DialogOptions()
        {
            CloseButton = true, 
            MaxWidth = MaxWidth.Medium, 
            FullWidth = true
        });
    }

    private void removeItemAsync(int id)
    {
        ToDoService.RemoveToDoItemAsync(id);
    }


}